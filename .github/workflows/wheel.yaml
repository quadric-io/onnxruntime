name: CI && Release & Upload Wheel

on:
  workflow_call:
    inputs:
      onnxruntime_branch:
        type: string
        default: "main"
      build_linux:
        type: boolean
        default: true
        description: 'Build Linux wheel'
      build_mac:
        type: boolean
        default: true
        description: 'Build macOS wheel'
  workflow_dispatch:
    inputs:
      onnxruntime_branch:
        type: string
        default: "main"
      promote_to_stable:
        type: boolean
        default: false
        description: 'Promote this build to stable release'
      build_linux:
        type: boolean
        default: true
        description: 'Build Linux wheel'
      build_mac:
        type: boolean
        default: true
        description: 'Build macOS wheel'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_upload_wheel_linux:
    if: inputs.build_linux != false  # Default to true if not specified (for push/PR)
    runs-on: The_CTOs_Choice
    container:
      image: ghcr.io/quadric-io/tvm:devel
      options: "--mount type=bind,source=${{ github.workspace }},target=/workspace"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: quadric-io/onnxruntime
        ref: ${{ inputs.onnxruntime_branch || github.ref }}
    - name: Build ONNX Runtime wheel
      working-directory: /workspace
      run: |
        python3 -m pip install "cmake<4"
        ./build.sh --build_wheel --config Release --parallel ${{ github.event_name == 'pull_request' && ' ' || '--skip_tests'}} --skip_submodule_sync --allow_running_as_root --compile_no_warning_as_error
        wheel_path=$(find . -name '*.whl' | xargs readlink -f)
        echo "wheel_path=$wheel_path" >> $GITHUB_ENV
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ort-wheel-linux
        path: ${{ env.wheel_path }}

  build_and_upload_wheel_mac:
    if: (inputs.build_mac != false) && (github.repository != 'quadric-io/sdk-cli')  # Default to true if not specified
    runs-on: [self-hosted, macOS, ARM64]
    steps:
    - name: Debug Python resolution
      run: |
        echo "=== Python Resolution ==="
        which python3
        python3 --version
        echo "=== All Python versions ==="
        ls -la /usr/bin/python* /usr/local/bin/python* /opt/homebrew/bin/python* 2>/dev/null || true
        echo "=== PATH ==="
        echo $PATH
        echo "=== Shell ==="
        echo $0
    - name: Debug working directory and git state
      run: |
        echo "=== Working Directory ==="
        pwd
        echo "=== Directory Contents ==="
        ls -la
        echo "=== Git Status ==="
        git status || echo "Not a git repo"
        echo "=== Git Remote ==="
        git remote -v || echo "No remotes"
        echo "=== Git Log ==="
        git log --oneline -5 || echo "No commits"
        echo "=== Checkout Details ==="
        echo "Ref: ${{ github.ref }}"
        echo "SHA: ${{ github.sha }}"
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: quadric-io/onnxruntime
        ref: ${{ inputs.onnxruntime_branch || github.ref }}

    - name: Create and activate virtual environment
      run: |
        python3 -m venv ort-build-venv
        source ort-build-venv/bin/activate
        python3 -m pip install --upgrade pip
        echo "VIRTUAL_ENV=$PWD/ort-build-venv" >> $GITHUB_ENV
        echo "$PWD/ort-build-venv/bin" >> $GITHUB_PATH

    - name: Install python dependencies
      run: |
        source ort-build-venv/bin/activate
        python3 -m pip install -r requirements.txt
        python3 -m pip install -r requirements-quadric.txt

    - name: Build ONNX Runtime wheel
      run: |
        source ort-build-venv/bin/activate
        ./build.sh --build_wheel --config Release --parallel ${{ github.event_name == 'pull_request' && ' ' || '--skip_tests'}} --skip_submodule_sync --compile_no_warning_as_error --skip_submodule_sync --apple_deploy_target 12
        wheel_path=$(find . -name '*.whl' | xargs readlink -f)
        echo "wheel_path=$wheel_path" >> $GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ort-wheel-mac
        path: ${{ env.wheel_path }}

  create_release:
    permissions:
      contents: write
    if: (github.ref == 'refs/heads/main') && ( github.event_name != 'workflow_call' && github.event_name != 'workflow_dispatch' )
    needs: [build_and_upload_wheel_mac, build_and_upload_wheel_linux]
    runs-on: ubuntu-latest
    steps:
    - name: Download ort-wheel-linux artifact
      if: inputs.build_linux != false
      uses: actions/download-artifact@v4
      with:
        name: ort-wheel-linux
        path: artifacts/
    - name: Download ort-wheel-mac artifact
      if: inputs.build_mac != false
      uses: actions/download-artifact@v4
      with:
        name: ort-wheel-mac
        path: artifacts/
    - name: Get next release tag
      id: get_tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        latest_tag=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          | jq -r '.[].tag_name' \
          | grep -E '^v[0-9]+$' \
          | sort -V \
          | tail -n1)

        echo "Latest tag: $latest_tag"

        if [ -z "$latest_tag" ]; then
          echo "‚ùå Error: No previous tags found matching 'v<number>' format. Cannot compute next tag."
          exit 1
        fi

        next_num=$(( ${latest_tag#v} + 1 ))
        next_tag="v$next_num"

        echo "next_tag=$next_tag" >> $GITHUB_ENV
        echo "next_tag=$next_tag" >> $GITHUB_OUTPUT
    - name: Create Release and Upload Both Assets
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.next_tag }}
        name: Release ${{ steps.get_tag.outputs.next_tag }}
        files: |
          artifacts/*.whl

  promote_to_stable:
    permissions:
      contents: write
    if: inputs.promote_to_stable == true
    needs: [build_and_upload_wheel_mac, build_and_upload_wheel_linux]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: quadric-io/onnxruntime
        fetch-depth: 0
        ref: ${{ inputs.onnxruntime_branch || 'main' }}

    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Get current commit info
      id: commit_info
      run: |
        # Get the actual commit we checked out, not github.sha
        commit_sha=$(git rev-parse HEAD)
        echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT
        short_sha=$(git rev-parse --short HEAD)
        echo "short_sha=$short_sha" >> $GITHUB_OUTPUT
        commit_message=$(git log -1 --pretty=format:"%s" HEAD)
        echo "commit_message=$commit_message" >> $GITHUB_OUTPUT

    - name: Delete existing stable release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Delete tag locally and remotely
        git tag -d stable 2>/dev/null || true
        git push origin :refs/tags/stable 2>/dev/null || true

        # Delete existing release
        release_id=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/stable" \
          | jq -r '.id // empty')

        if [ ! -z "$release_id" ] && [ "$release_id" != "null" ]; then
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
        fi

    - name: Create stable tag and release
      run: |
        commit_sha=${{ steps.commit_info.outputs.commit_sha }}
        git tag stable $commit_sha
        git push origin stable

    - name: Create Stable Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: stable
        name: "Stable Release"
        body: |
          This is the latest stable release of onnxruntime.

          **Promoted from:** ${{ steps.commit_info.outputs.short_sha }}
          **Commit:** ${{ steps.commit_info.outputs.commit_message }}
          **Build:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        files: |
          artifacts/**/*.whl
